/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sol.petroleum.master.data.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sol.petroleum.master.data.model.inventory;
import com.sol.petroleum.master.data.model.inventoryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the inventory service. Represents a row in the &quot;sol_master_data_inventory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>inventoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link inventoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see inventoryImpl
 * @generated
 */
@JSON(strict = true)
public class inventoryModelImpl
	extends BaseModelImpl<inventory> implements inventoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inventory model instance should use the <code>inventory</code> interface instead.
	 */
	public static final String TABLE_NAME = "sol_master_data_inventory";

	public static final Object[][] TABLE_COLUMNS = {
		{"masterDataInventoryId", Types.BIGINT}, {"itemNumber", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"interId", Types.VARCHAR},
		{"locationCode", Types.VARCHAR}, {"locationDesc", Types.VARCHAR},
		{"qtyOnOrder", Types.INTEGER}, {"qtyBackOrdered", Types.INTEGER},
		{"qtyDropShipped", Types.INTEGER}, {"qtyInUse", Types.INTEGER},
		{"qtyInService", Types.INTEGER}, {"qtyReturned", Types.INTEGER},
		{"qtyDamaged", Types.INTEGER}, {"qtyOnHand", Types.INTEGER},
		{"qtyAllocated", Types.INTEGER}, {"qtyCommitted", Types.INTEGER},
		{"qtySold", Types.INTEGER}, {"inactive", Types.INTEGER},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("masterDataInventoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("itemNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("interId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qtyOnOrder", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyBackOrdered", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyDropShipped", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyInUse", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyInService", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyReturned", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyDamaged", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyOnHand", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyAllocated", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtyCommitted", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("qtySold", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("inactive", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table sol_master_data_inventory (masterDataInventoryId LONG not null primary key,itemNumber VARCHAR(75) null,companyId LONG,interId VARCHAR(75) null,locationCode VARCHAR(75) null,locationDesc VARCHAR(75) null,qtyOnOrder INTEGER,qtyBackOrdered INTEGER,qtyDropShipped INTEGER,qtyInUse INTEGER,qtyInService INTEGER,qtyReturned INTEGER,qtyDamaged INTEGER,qtyOnHand INTEGER,qtyAllocated INTEGER,qtyCommitted INTEGER,qtySold INTEGER,inactive INTEGER,createdDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table sol_master_data_inventory";

	public static final String ORDER_BY_JPQL =
		" ORDER BY inventory.masterDataInventoryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY sol_master_data_inventory.masterDataInventoryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LOCATIONCODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MASTERDATAINVENTORYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public inventoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _masterDataInventoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMasterDataInventoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _masterDataInventoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return inventory.class;
	}

	@Override
	public String getModelClassName() {
		return inventory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<inventory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<inventory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<inventory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((inventory)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<inventory, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<inventory, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(inventory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<inventory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<inventory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<inventory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<inventory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<inventory, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<inventory, Object>>();
		Map<String, BiConsumer<inventory, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<inventory, ?>>();

		attributeGetterFunctions.put(
			"masterDataInventoryId", inventory::getMasterDataInventoryId);
		attributeSetterBiConsumers.put(
			"masterDataInventoryId",
			(BiConsumer<inventory, Long>)inventory::setMasterDataInventoryId);
		attributeGetterFunctions.put("itemNumber", inventory::getItemNumber);
		attributeSetterBiConsumers.put(
			"itemNumber",
			(BiConsumer<inventory, String>)inventory::setItemNumber);
		attributeGetterFunctions.put("companyId", inventory::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<inventory, Long>)inventory::setCompanyId);
		attributeGetterFunctions.put("interId", inventory::getInterId);
		attributeSetterBiConsumers.put(
			"interId", (BiConsumer<inventory, String>)inventory::setInterId);
		attributeGetterFunctions.put(
			"locationCode", inventory::getLocationCode);
		attributeSetterBiConsumers.put(
			"locationCode",
			(BiConsumer<inventory, String>)inventory::setLocationCode);
		attributeGetterFunctions.put(
			"locationDesc", inventory::getLocationDesc);
		attributeSetterBiConsumers.put(
			"locationDesc",
			(BiConsumer<inventory, String>)inventory::setLocationDesc);
		attributeGetterFunctions.put("qtyOnOrder", inventory::getQtyOnOrder);
		attributeSetterBiConsumers.put(
			"qtyOnOrder",
			(BiConsumer<inventory, Integer>)inventory::setQtyOnOrder);
		attributeGetterFunctions.put(
			"qtyBackOrdered", inventory::getQtyBackOrdered);
		attributeSetterBiConsumers.put(
			"qtyBackOrdered",
			(BiConsumer<inventory, Integer>)inventory::setQtyBackOrdered);
		attributeGetterFunctions.put(
			"qtyDropShipped", inventory::getQtyDropShipped);
		attributeSetterBiConsumers.put(
			"qtyDropShipped",
			(BiConsumer<inventory, Integer>)inventory::setQtyDropShipped);
		attributeGetterFunctions.put("qtyInUse", inventory::getQtyInUse);
		attributeSetterBiConsumers.put(
			"qtyInUse", (BiConsumer<inventory, Integer>)inventory::setQtyInUse);
		attributeGetterFunctions.put(
			"qtyInService", inventory::getQtyInService);
		attributeSetterBiConsumers.put(
			"qtyInService",
			(BiConsumer<inventory, Integer>)inventory::setQtyInService);
		attributeGetterFunctions.put("qtyReturned", inventory::getQtyReturned);
		attributeSetterBiConsumers.put(
			"qtyReturned",
			(BiConsumer<inventory, Integer>)inventory::setQtyReturned);
		attributeGetterFunctions.put("qtyDamaged", inventory::getQtyDamaged);
		attributeSetterBiConsumers.put(
			"qtyDamaged",
			(BiConsumer<inventory, Integer>)inventory::setQtyDamaged);
		attributeGetterFunctions.put("qtyOnHand", inventory::getQtyOnHand);
		attributeSetterBiConsumers.put(
			"qtyOnHand",
			(BiConsumer<inventory, Integer>)inventory::setQtyOnHand);
		attributeGetterFunctions.put(
			"qtyAllocated", inventory::getQtyAllocated);
		attributeSetterBiConsumers.put(
			"qtyAllocated",
			(BiConsumer<inventory, Integer>)inventory::setQtyAllocated);
		attributeGetterFunctions.put(
			"qtyCommitted", inventory::getQtyCommitted);
		attributeSetterBiConsumers.put(
			"qtyCommitted",
			(BiConsumer<inventory, Integer>)inventory::setQtyCommitted);
		attributeGetterFunctions.put("qtySold", inventory::getQtySold);
		attributeSetterBiConsumers.put(
			"qtySold", (BiConsumer<inventory, Integer>)inventory::setQtySold);
		attributeGetterFunctions.put("inactive", inventory::getInactive);
		attributeSetterBiConsumers.put(
			"inactive", (BiConsumer<inventory, Integer>)inventory::setInactive);
		attributeGetterFunctions.put("createdDate", inventory::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<inventory, Date>)inventory::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", inventory::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<inventory, Date>)inventory::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMasterDataInventoryId() {
		return _masterDataInventoryId;
	}

	@Override
	public void setMasterDataInventoryId(long masterDataInventoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_masterDataInventoryId = masterDataInventoryId;
	}

	@JSON
	@Override
	public String getItemNumber() {
		if (_itemNumber == null) {
			return "";
		}
		else {
			return _itemNumber;
		}
	}

	@Override
	public void setItemNumber(String itemNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemNumber = itemNumber;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public String getInterId() {
		if (_interId == null) {
			return "";
		}
		else {
			return _interId;
		}
	}

	@Override
	public void setInterId(String interId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_interId = interId;
	}

	@JSON
	@Override
	public String getLocationCode() {
		if (_locationCode == null) {
			return "";
		}
		else {
			return _locationCode;
		}
	}

	@Override
	public void setLocationCode(String locationCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationCode = locationCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLocationCode() {
		return getColumnOriginalValue("locationCode");
	}

	@JSON
	@Override
	public String getLocationDesc() {
		if (_locationDesc == null) {
			return "";
		}
		else {
			return _locationDesc;
		}
	}

	@Override
	public void setLocationDesc(String locationDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationDesc = locationDesc;
	}

	@JSON
	@Override
	public Integer getQtyOnOrder() {
		return _qtyOnOrder;
	}

	@Override
	public void setQtyOnOrder(Integer qtyOnOrder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyOnOrder = qtyOnOrder;
	}

	@JSON
	@Override
	public Integer getQtyBackOrdered() {
		return _qtyBackOrdered;
	}

	@Override
	public void setQtyBackOrdered(Integer qtyBackOrdered) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyBackOrdered = qtyBackOrdered;
	}

	@JSON
	@Override
	public Integer getQtyDropShipped() {
		return _qtyDropShipped;
	}

	@Override
	public void setQtyDropShipped(Integer qtyDropShipped) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyDropShipped = qtyDropShipped;
	}

	@JSON
	@Override
	public Integer getQtyInUse() {
		return _qtyInUse;
	}

	@Override
	public void setQtyInUse(Integer qtyInUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyInUse = qtyInUse;
	}

	@JSON
	@Override
	public Integer getQtyInService() {
		return _qtyInService;
	}

	@Override
	public void setQtyInService(Integer qtyInService) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyInService = qtyInService;
	}

	@JSON
	@Override
	public Integer getQtyReturned() {
		return _qtyReturned;
	}

	@Override
	public void setQtyReturned(Integer qtyReturned) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyReturned = qtyReturned;
	}

	@JSON
	@Override
	public Integer getQtyDamaged() {
		return _qtyDamaged;
	}

	@Override
	public void setQtyDamaged(Integer qtyDamaged) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyDamaged = qtyDamaged;
	}

	@JSON
	@Override
	public Integer getQtyOnHand() {
		return _qtyOnHand;
	}

	@Override
	public void setQtyOnHand(Integer qtyOnHand) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyOnHand = qtyOnHand;
	}

	@JSON
	@Override
	public Integer getQtyAllocated() {
		return _qtyAllocated;
	}

	@Override
	public void setQtyAllocated(Integer qtyAllocated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyAllocated = qtyAllocated;
	}

	@JSON
	@Override
	public Integer getQtyCommitted() {
		return _qtyCommitted;
	}

	@Override
	public void setQtyCommitted(Integer qtyCommitted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtyCommitted = qtyCommitted;
	}

	@JSON
	@Override
	public Integer getQtySold() {
		return _qtySold;
	}

	@Override
	public void setQtySold(Integer qtySold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qtySold = qtySold;
	}

	@JSON
	@Override
	public Integer getInactive() {
		return _inactive;
	}

	@Override
	public void setInactive(Integer inactive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inactive = inactive;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), inventory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public inventory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, inventory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		inventoryImpl inventoryImpl = new inventoryImpl();

		inventoryImpl.setMasterDataInventoryId(getMasterDataInventoryId());
		inventoryImpl.setItemNumber(getItemNumber());
		inventoryImpl.setCompanyId(getCompanyId());
		inventoryImpl.setInterId(getInterId());
		inventoryImpl.setLocationCode(getLocationCode());
		inventoryImpl.setLocationDesc(getLocationDesc());
		inventoryImpl.setQtyOnOrder(getQtyOnOrder());
		inventoryImpl.setQtyBackOrdered(getQtyBackOrdered());
		inventoryImpl.setQtyDropShipped(getQtyDropShipped());
		inventoryImpl.setQtyInUse(getQtyInUse());
		inventoryImpl.setQtyInService(getQtyInService());
		inventoryImpl.setQtyReturned(getQtyReturned());
		inventoryImpl.setQtyDamaged(getQtyDamaged());
		inventoryImpl.setQtyOnHand(getQtyOnHand());
		inventoryImpl.setQtyAllocated(getQtyAllocated());
		inventoryImpl.setQtyCommitted(getQtyCommitted());
		inventoryImpl.setQtySold(getQtySold());
		inventoryImpl.setInactive(getInactive());
		inventoryImpl.setCreatedDate(getCreatedDate());
		inventoryImpl.setModifiedDate(getModifiedDate());

		inventoryImpl.resetOriginalValues();

		return inventoryImpl;
	}

	@Override
	public inventory cloneWithOriginalValues() {
		inventoryImpl inventoryImpl = new inventoryImpl();

		inventoryImpl.setMasterDataInventoryId(
			this.<Long>getColumnOriginalValue("masterDataInventoryId"));
		inventoryImpl.setItemNumber(
			this.<String>getColumnOriginalValue("itemNumber"));
		inventoryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		inventoryImpl.setInterId(
			this.<String>getColumnOriginalValue("interId"));
		inventoryImpl.setLocationCode(
			this.<String>getColumnOriginalValue("locationCode"));
		inventoryImpl.setLocationDesc(
			this.<String>getColumnOriginalValue("locationDesc"));
		inventoryImpl.setQtyOnOrder(
			this.<Integer>getColumnOriginalValue("qtyOnOrder"));
		inventoryImpl.setQtyBackOrdered(
			this.<Integer>getColumnOriginalValue("qtyBackOrdered"));
		inventoryImpl.setQtyDropShipped(
			this.<Integer>getColumnOriginalValue("qtyDropShipped"));
		inventoryImpl.setQtyInUse(
			this.<Integer>getColumnOriginalValue("qtyInUse"));
		inventoryImpl.setQtyInService(
			this.<Integer>getColumnOriginalValue("qtyInService"));
		inventoryImpl.setQtyReturned(
			this.<Integer>getColumnOriginalValue("qtyReturned"));
		inventoryImpl.setQtyDamaged(
			this.<Integer>getColumnOriginalValue("qtyDamaged"));
		inventoryImpl.setQtyOnHand(
			this.<Integer>getColumnOriginalValue("qtyOnHand"));
		inventoryImpl.setQtyAllocated(
			this.<Integer>getColumnOriginalValue("qtyAllocated"));
		inventoryImpl.setQtyCommitted(
			this.<Integer>getColumnOriginalValue("qtyCommitted"));
		inventoryImpl.setQtySold(
			this.<Integer>getColumnOriginalValue("qtySold"));
		inventoryImpl.setInactive(
			this.<Integer>getColumnOriginalValue("inactive"));
		inventoryImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		inventoryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return inventoryImpl;
	}

	@Override
	public int compareTo(inventory inventory) {
		long primaryKey = inventory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof inventory)) {
			return false;
		}

		inventory inventory = (inventory)object;

		long primaryKey = inventory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<inventory> toCacheModel() {
		inventoryCacheModel inventoryCacheModel = new inventoryCacheModel();

		inventoryCacheModel.masterDataInventoryId = getMasterDataInventoryId();

		inventoryCacheModel.itemNumber = getItemNumber();

		String itemNumber = inventoryCacheModel.itemNumber;

		if ((itemNumber != null) && (itemNumber.length() == 0)) {
			inventoryCacheModel.itemNumber = null;
		}

		inventoryCacheModel.companyId = getCompanyId();

		inventoryCacheModel.interId = getInterId();

		String interId = inventoryCacheModel.interId;

		if ((interId != null) && (interId.length() == 0)) {
			inventoryCacheModel.interId = null;
		}

		inventoryCacheModel.locationCode = getLocationCode();

		String locationCode = inventoryCacheModel.locationCode;

		if ((locationCode != null) && (locationCode.length() == 0)) {
			inventoryCacheModel.locationCode = null;
		}

		inventoryCacheModel.locationDesc = getLocationDesc();

		String locationDesc = inventoryCacheModel.locationDesc;

		if ((locationDesc != null) && (locationDesc.length() == 0)) {
			inventoryCacheModel.locationDesc = null;
		}

		Integer qtyOnOrder = getQtyOnOrder();

		if (qtyOnOrder != null) {
			inventoryCacheModel.qtyOnOrder = qtyOnOrder;
		}

		Integer qtyBackOrdered = getQtyBackOrdered();

		if (qtyBackOrdered != null) {
			inventoryCacheModel.qtyBackOrdered = qtyBackOrdered;
		}

		Integer qtyDropShipped = getQtyDropShipped();

		if (qtyDropShipped != null) {
			inventoryCacheModel.qtyDropShipped = qtyDropShipped;
		}

		Integer qtyInUse = getQtyInUse();

		if (qtyInUse != null) {
			inventoryCacheModel.qtyInUse = qtyInUse;
		}

		Integer qtyInService = getQtyInService();

		if (qtyInService != null) {
			inventoryCacheModel.qtyInService = qtyInService;
		}

		Integer qtyReturned = getQtyReturned();

		if (qtyReturned != null) {
			inventoryCacheModel.qtyReturned = qtyReturned;
		}

		Integer qtyDamaged = getQtyDamaged();

		if (qtyDamaged != null) {
			inventoryCacheModel.qtyDamaged = qtyDamaged;
		}

		Integer qtyOnHand = getQtyOnHand();

		if (qtyOnHand != null) {
			inventoryCacheModel.qtyOnHand = qtyOnHand;
		}

		Integer qtyAllocated = getQtyAllocated();

		if (qtyAllocated != null) {
			inventoryCacheModel.qtyAllocated = qtyAllocated;
		}

		Integer qtyCommitted = getQtyCommitted();

		if (qtyCommitted != null) {
			inventoryCacheModel.qtyCommitted = qtyCommitted;
		}

		Integer qtySold = getQtySold();

		if (qtySold != null) {
			inventoryCacheModel.qtySold = qtySold;
		}

		Integer inactive = getInactive();

		if (inactive != null) {
			inventoryCacheModel.inactive = inactive;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			inventoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			inventoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			inventoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			inventoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return inventoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<inventory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<inventory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<inventory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((inventory)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, inventory>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					inventory.class, ModelWrapper.class);

	}

	private long _masterDataInventoryId;
	private String _itemNumber;
	private long _companyId;
	private String _interId;
	private String _locationCode;
	private String _locationDesc;
	private Integer _qtyOnOrder;
	private Integer _qtyBackOrdered;
	private Integer _qtyDropShipped;
	private Integer _qtyInUse;
	private Integer _qtyInService;
	private Integer _qtyReturned;
	private Integer _qtyDamaged;
	private Integer _qtyOnHand;
	private Integer _qtyAllocated;
	private Integer _qtyCommitted;
	private Integer _qtySold;
	private Integer _inactive;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<inventory, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((inventory)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"masterDataInventoryId", _masterDataInventoryId);
		_columnOriginalValues.put("itemNumber", _itemNumber);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("interId", _interId);
		_columnOriginalValues.put("locationCode", _locationCode);
		_columnOriginalValues.put("locationDesc", _locationDesc);
		_columnOriginalValues.put("qtyOnOrder", _qtyOnOrder);
		_columnOriginalValues.put("qtyBackOrdered", _qtyBackOrdered);
		_columnOriginalValues.put("qtyDropShipped", _qtyDropShipped);
		_columnOriginalValues.put("qtyInUse", _qtyInUse);
		_columnOriginalValues.put("qtyInService", _qtyInService);
		_columnOriginalValues.put("qtyReturned", _qtyReturned);
		_columnOriginalValues.put("qtyDamaged", _qtyDamaged);
		_columnOriginalValues.put("qtyOnHand", _qtyOnHand);
		_columnOriginalValues.put("qtyAllocated", _qtyAllocated);
		_columnOriginalValues.put("qtyCommitted", _qtyCommitted);
		_columnOriginalValues.put("qtySold", _qtySold);
		_columnOriginalValues.put("inactive", _inactive);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("masterDataInventoryId", 1L);

		columnBitmasks.put("itemNumber", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("interId", 8L);

		columnBitmasks.put("locationCode", 16L);

		columnBitmasks.put("locationDesc", 32L);

		columnBitmasks.put("qtyOnOrder", 64L);

		columnBitmasks.put("qtyBackOrdered", 128L);

		columnBitmasks.put("qtyDropShipped", 256L);

		columnBitmasks.put("qtyInUse", 512L);

		columnBitmasks.put("qtyInService", 1024L);

		columnBitmasks.put("qtyReturned", 2048L);

		columnBitmasks.put("qtyDamaged", 4096L);

		columnBitmasks.put("qtyOnHand", 8192L);

		columnBitmasks.put("qtyAllocated", 16384L);

		columnBitmasks.put("qtyCommitted", 32768L);

		columnBitmasks.put("qtySold", 65536L);

		columnBitmasks.put("inactive", 131072L);

		columnBitmasks.put("createdDate", 262144L);

		columnBitmasks.put("modifiedDate", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private inventory _escapedModel;

}