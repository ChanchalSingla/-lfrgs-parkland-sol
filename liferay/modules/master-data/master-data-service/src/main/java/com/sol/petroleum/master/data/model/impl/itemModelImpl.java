/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sol.petroleum.master.data.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sol.petroleum.master.data.model.item;
import com.sol.petroleum.master.data.model.itemModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the item service. Represents a row in the &quot;sol_master_data_item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>itemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link itemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see itemImpl
 * @generated
 */
@JSON(strict = true)
public class itemModelImpl extends BaseModelImpl<item> implements itemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item model instance should use the <code>item</code> interface instead.
	 */
	public static final String TABLE_NAME = "sol_master_data_item";

	public static final Object[][] TABLE_COLUMNS = {
		{"masterDataItemId", Types.BIGINT}, {"category", Types.VARCHAR},
		{"inactive", Types.INTEGER}, {"interId", Types.VARCHAR},
		{"itemNumber", Types.VARCHAR}, {"itemTaxSchId", Types.VARCHAR},
		{"itemType", Types.INTEGER}, {"subCategory", Types.VARCHAR},
		{"taxOptions", Types.INTEGER}, {"title", Types.VARCHAR},
		{"uOfMSchedule", Types.VARCHAR}, {"visibility", Types.VARCHAR},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("masterDataItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inactive", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("interId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemTaxSchId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("subCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxOptions", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uOfMSchedule", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visibility", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table sol_master_data_item (masterDataItemId LONG not null primary key,category VARCHAR(75) null,inactive INTEGER,interId VARCHAR(75) null,itemNumber VARCHAR(75) null,itemTaxSchId VARCHAR(75) null,itemType INTEGER,subCategory VARCHAR(75) null,taxOptions INTEGER,title VARCHAR(75) null,uOfMSchedule VARCHAR(75) null,visibility VARCHAR(75) null,createdDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table sol_master_data_item";

	public static final String ORDER_BY_JPQL =
		" ORDER BY item.masterDataItemId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY sol_master_data_item.masterDataItemId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ITEMNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MASTERDATAITEMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public itemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _masterDataItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMasterDataItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _masterDataItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return item.class;
	}

	@Override
	public String getModelClassName() {
		return item.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<item, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((item)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<item, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<item, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((item)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<item, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<item, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<item, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<item, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<item, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<item, Object>>();
		Map<String, BiConsumer<item, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<item, ?>>();

		attributeGetterFunctions.put(
			"masterDataItemId", item::getMasterDataItemId);
		attributeSetterBiConsumers.put(
			"masterDataItemId",
			(BiConsumer<item, Long>)item::setMasterDataItemId);
		attributeGetterFunctions.put("category", item::getCategory);
		attributeSetterBiConsumers.put(
			"category", (BiConsumer<item, String>)item::setCategory);
		attributeGetterFunctions.put("inactive", item::getInactive);
		attributeSetterBiConsumers.put(
			"inactive", (BiConsumer<item, Integer>)item::setInactive);
		attributeGetterFunctions.put("interId", item::getInterId);
		attributeSetterBiConsumers.put(
			"interId", (BiConsumer<item, String>)item::setInterId);
		attributeGetterFunctions.put("itemNumber", item::getItemNumber);
		attributeSetterBiConsumers.put(
			"itemNumber", (BiConsumer<item, String>)item::setItemNumber);
		attributeGetterFunctions.put("itemTaxSchId", item::getItemTaxSchId);
		attributeSetterBiConsumers.put(
			"itemTaxSchId", (BiConsumer<item, String>)item::setItemTaxSchId);
		attributeGetterFunctions.put("itemType", item::getItemType);
		attributeSetterBiConsumers.put(
			"itemType", (BiConsumer<item, Integer>)item::setItemType);
		attributeGetterFunctions.put("subCategory", item::getSubCategory);
		attributeSetterBiConsumers.put(
			"subCategory", (BiConsumer<item, String>)item::setSubCategory);
		attributeGetterFunctions.put("taxOptions", item::getTaxOptions);
		attributeSetterBiConsumers.put(
			"taxOptions", (BiConsumer<item, Integer>)item::setTaxOptions);
		attributeGetterFunctions.put("title", item::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<item, String>)item::setTitle);
		attributeGetterFunctions.put("uOfMSchedule", item::getUOfMSchedule);
		attributeSetterBiConsumers.put(
			"uOfMSchedule", (BiConsumer<item, String>)item::setUOfMSchedule);
		attributeGetterFunctions.put("visibility", item::getVisibility);
		attributeSetterBiConsumers.put(
			"visibility", (BiConsumer<item, String>)item::setVisibility);
		attributeGetterFunctions.put("createdDate", item::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate", (BiConsumer<item, Date>)item::setCreatedDate);
		attributeGetterFunctions.put("modifiedDate", item::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<item, Date>)item::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMasterDataItemId() {
		return _masterDataItemId;
	}

	@Override
	public void setMasterDataItemId(long masterDataItemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_masterDataItemId = masterDataItemId;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@JSON
	@Override
	public Integer getInactive() {
		return _inactive;
	}

	@Override
	public void setInactive(Integer inactive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inactive = inactive;
	}

	@JSON
	@Override
	public String getInterId() {
		if (_interId == null) {
			return "";
		}
		else {
			return _interId;
		}
	}

	@Override
	public void setInterId(String interId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_interId = interId;
	}

	@JSON
	@Override
	public String getItemNumber() {
		if (_itemNumber == null) {
			return "";
		}
		else {
			return _itemNumber;
		}
	}

	@Override
	public void setItemNumber(String itemNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemNumber = itemNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalItemNumber() {
		return getColumnOriginalValue("itemNumber");
	}

	@JSON
	@Override
	public String getItemTaxSchId() {
		if (_itemTaxSchId == null) {
			return "";
		}
		else {
			return _itemTaxSchId;
		}
	}

	@Override
	public void setItemTaxSchId(String itemTaxSchId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemTaxSchId = itemTaxSchId;
	}

	@JSON
	@Override
	public Integer getItemType() {
		return _itemType;
	}

	@Override
	public void setItemType(Integer itemType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemType = itemType;
	}

	@JSON
	@Override
	public String getSubCategory() {
		if (_subCategory == null) {
			return "";
		}
		else {
			return _subCategory;
		}
	}

	@Override
	public void setSubCategory(String subCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subCategory = subCategory;
	}

	@JSON
	@Override
	public Integer getTaxOptions() {
		return _taxOptions;
	}

	@Override
	public void setTaxOptions(Integer taxOptions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taxOptions = taxOptions;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getUOfMSchedule() {
		if (_uOfMSchedule == null) {
			return "";
		}
		else {
			return _uOfMSchedule;
		}
	}

	@Override
	public void setUOfMSchedule(String uOfMSchedule) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uOfMSchedule = uOfMSchedule;
	}

	@JSON
	@Override
	public String getVisibility() {
		if (_visibility == null) {
			return "";
		}
		else {
			return _visibility;
		}
	}

	@Override
	public void setVisibility(String visibility) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_visibility = visibility;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, item.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public item toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, item>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		itemImpl itemImpl = new itemImpl();

		itemImpl.setMasterDataItemId(getMasterDataItemId());
		itemImpl.setCategory(getCategory());
		itemImpl.setInactive(getInactive());
		itemImpl.setInterId(getInterId());
		itemImpl.setItemNumber(getItemNumber());
		itemImpl.setItemTaxSchId(getItemTaxSchId());
		itemImpl.setItemType(getItemType());
		itemImpl.setSubCategory(getSubCategory());
		itemImpl.setTaxOptions(getTaxOptions());
		itemImpl.setTitle(getTitle());
		itemImpl.setUOfMSchedule(getUOfMSchedule());
		itemImpl.setVisibility(getVisibility());
		itemImpl.setCreatedDate(getCreatedDate());
		itemImpl.setModifiedDate(getModifiedDate());

		itemImpl.resetOriginalValues();

		return itemImpl;
	}

	@Override
	public item cloneWithOriginalValues() {
		itemImpl itemImpl = new itemImpl();

		itemImpl.setMasterDataItemId(
			this.<Long>getColumnOriginalValue("masterDataItemId"));
		itemImpl.setCategory(this.<String>getColumnOriginalValue("category"));
		itemImpl.setInactive(this.<Integer>getColumnOriginalValue("inactive"));
		itemImpl.setInterId(this.<String>getColumnOriginalValue("interId"));
		itemImpl.setItemNumber(
			this.<String>getColumnOriginalValue("itemNumber"));
		itemImpl.setItemTaxSchId(
			this.<String>getColumnOriginalValue("itemTaxSchId"));
		itemImpl.setItemType(this.<Integer>getColumnOriginalValue("itemType"));
		itemImpl.setSubCategory(
			this.<String>getColumnOriginalValue("subCategory"));
		itemImpl.setTaxOptions(
			this.<Integer>getColumnOriginalValue("taxOptions"));
		itemImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		itemImpl.setUOfMSchedule(
			this.<String>getColumnOriginalValue("uOfMSchedule"));
		itemImpl.setVisibility(
			this.<String>getColumnOriginalValue("visibility"));
		itemImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		itemImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return itemImpl;
	}

	@Override
	public int compareTo(item item) {
		long primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof item)) {
			return false;
		}

		item item = (item)object;

		long primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<item> toCacheModel() {
		itemCacheModel itemCacheModel = new itemCacheModel();

		itemCacheModel.masterDataItemId = getMasterDataItemId();

		itemCacheModel.category = getCategory();

		String category = itemCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			itemCacheModel.category = null;
		}

		Integer inactive = getInactive();

		if (inactive != null) {
			itemCacheModel.inactive = inactive;
		}

		itemCacheModel.interId = getInterId();

		String interId = itemCacheModel.interId;

		if ((interId != null) && (interId.length() == 0)) {
			itemCacheModel.interId = null;
		}

		itemCacheModel.itemNumber = getItemNumber();

		String itemNumber = itemCacheModel.itemNumber;

		if ((itemNumber != null) && (itemNumber.length() == 0)) {
			itemCacheModel.itemNumber = null;
		}

		itemCacheModel.itemTaxSchId = getItemTaxSchId();

		String itemTaxSchId = itemCacheModel.itemTaxSchId;

		if ((itemTaxSchId != null) && (itemTaxSchId.length() == 0)) {
			itemCacheModel.itemTaxSchId = null;
		}

		Integer itemType = getItemType();

		if (itemType != null) {
			itemCacheModel.itemType = itemType;
		}

		itemCacheModel.subCategory = getSubCategory();

		String subCategory = itemCacheModel.subCategory;

		if ((subCategory != null) && (subCategory.length() == 0)) {
			itemCacheModel.subCategory = null;
		}

		Integer taxOptions = getTaxOptions();

		if (taxOptions != null) {
			itemCacheModel.taxOptions = taxOptions;
		}

		itemCacheModel.title = getTitle();

		String title = itemCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			itemCacheModel.title = null;
		}

		itemCacheModel.uOfMSchedule = getUOfMSchedule();

		String uOfMSchedule = itemCacheModel.uOfMSchedule;

		if ((uOfMSchedule != null) && (uOfMSchedule.length() == 0)) {
			itemCacheModel.uOfMSchedule = null;
		}

		itemCacheModel.visibility = getVisibility();

		String visibility = itemCacheModel.visibility;

		if ((visibility != null) && (visibility.length() == 0)) {
			itemCacheModel.visibility = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			itemCacheModel.createdDate = createdDate.getTime();
		}
		else {
			itemCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			itemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			itemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return itemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<item, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((item)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, item>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					item.class, ModelWrapper.class);

	}

	private long _masterDataItemId;
	private String _category;
	private Integer _inactive;
	private String _interId;
	private String _itemNumber;
	private String _itemTaxSchId;
	private Integer _itemType;
	private String _subCategory;
	private Integer _taxOptions;
	private String _title;
	private String _uOfMSchedule;
	private String _visibility;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<item, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((item)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("masterDataItemId", _masterDataItemId);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("inactive", _inactive);
		_columnOriginalValues.put("interId", _interId);
		_columnOriginalValues.put("itemNumber", _itemNumber);
		_columnOriginalValues.put("itemTaxSchId", _itemTaxSchId);
		_columnOriginalValues.put("itemType", _itemType);
		_columnOriginalValues.put("subCategory", _subCategory);
		_columnOriginalValues.put("taxOptions", _taxOptions);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("uOfMSchedule", _uOfMSchedule);
		_columnOriginalValues.put("visibility", _visibility);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("masterDataItemId", 1L);

		columnBitmasks.put("category", 2L);

		columnBitmasks.put("inactive", 4L);

		columnBitmasks.put("interId", 8L);

		columnBitmasks.put("itemNumber", 16L);

		columnBitmasks.put("itemTaxSchId", 32L);

		columnBitmasks.put("itemType", 64L);

		columnBitmasks.put("subCategory", 128L);

		columnBitmasks.put("taxOptions", 256L);

		columnBitmasks.put("title", 512L);

		columnBitmasks.put("uOfMSchedule", 1024L);

		columnBitmasks.put("visibility", 2048L);

		columnBitmasks.put("createdDate", 4096L);

		columnBitmasks.put("modifiedDate", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private item _escapedModel;

}