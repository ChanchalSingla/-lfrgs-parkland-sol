/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sol.petroleum.headless.audit.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sol.petroleum.headless.audit.model.apiAudit;
import com.sol.petroleum.headless.audit.model.apiAuditModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the apiAudit service. Represents a row in the &quot;sol_audit_apiAudit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>apiAuditModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link apiAuditImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see apiAuditImpl
 * @generated
 */
@JSON(strict = true)
public class apiAuditModelImpl
	extends BaseModelImpl<apiAudit> implements apiAuditModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a api audit model instance should use the <code>apiAudit</code> interface instead.
	 */
	public static final String TABLE_NAME = "sol_audit_apiAudit";

	public static final Object[][] TABLE_COLUMNS = {
		{"auditId", Types.BIGINT}, {"UUID", Types.VARCHAR},
		{"createdDate", Types.TIMESTAMP}, {"actionName", Types.VARCHAR},
		{"sourceType", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusCode", Types.VARCHAR}, {"requestJson", Types.VARCHAR},
		{"responseJson", Types.VARCHAR}, {"requestTime", Types.TIMESTAMP},
		{"responseTime", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("auditId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("UUID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourceType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestJson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseJson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("responseTime", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table sol_audit_apiAudit (auditId LONG not null primary key,UUID VARCHAR(75) null,createdDate DATE null,actionName VARCHAR(75) null,sourceType VARCHAR(75) null,status INTEGER,statusCode VARCHAR(75) null,requestJson STRING null,responseJson STRING null,requestTime DATE null,responseTime DATE null)";

	public static final String TABLE_SQL_DROP = "drop table sol_audit_apiAudit";

	public static final String ORDER_BY_JPQL = " ORDER BY apiAudit.auditId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY sol_audit_apiAudit.auditId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AUDITID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public apiAuditModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _auditId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuditId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _auditId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return apiAudit.class;
	}

	@Override
	public String getModelClassName() {
		return apiAudit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<apiAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<apiAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<apiAudit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((apiAudit)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<apiAudit, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<apiAudit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(apiAudit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<apiAudit, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<apiAudit, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<apiAudit, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<apiAudit, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<apiAudit, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<apiAudit, Object>>();
		Map<String, BiConsumer<apiAudit, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<apiAudit, ?>>();

		attributeGetterFunctions.put("auditId", apiAudit::getAuditId);
		attributeSetterBiConsumers.put(
			"auditId", (BiConsumer<apiAudit, Long>)apiAudit::setAuditId);
		attributeGetterFunctions.put("UUID", apiAudit::getUUID);
		attributeSetterBiConsumers.put(
			"UUID", (BiConsumer<apiAudit, String>)apiAudit::setUUID);
		attributeGetterFunctions.put("createdDate", apiAudit::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<apiAudit, Date>)apiAudit::setCreatedDate);
		attributeGetterFunctions.put("actionName", apiAudit::getActionName);
		attributeSetterBiConsumers.put(
			"actionName",
			(BiConsumer<apiAudit, String>)apiAudit::setActionName);
		attributeGetterFunctions.put("sourceType", apiAudit::getSourceType);
		attributeSetterBiConsumers.put(
			"sourceType",
			(BiConsumer<apiAudit, String>)apiAudit::setSourceType);
		attributeGetterFunctions.put("status", apiAudit::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<apiAudit, Integer>)apiAudit::setStatus);
		attributeGetterFunctions.put("statusCode", apiAudit::getStatusCode);
		attributeSetterBiConsumers.put(
			"statusCode",
			(BiConsumer<apiAudit, String>)apiAudit::setStatusCode);
		attributeGetterFunctions.put("requestJson", apiAudit::getRequestJson);
		attributeSetterBiConsumers.put(
			"requestJson",
			(BiConsumer<apiAudit, String>)apiAudit::setRequestJson);
		attributeGetterFunctions.put("responseJson", apiAudit::getResponseJson);
		attributeSetterBiConsumers.put(
			"responseJson",
			(BiConsumer<apiAudit, String>)apiAudit::setResponseJson);
		attributeGetterFunctions.put("requestTime", apiAudit::getRequestTime);
		attributeSetterBiConsumers.put(
			"requestTime",
			(BiConsumer<apiAudit, Date>)apiAudit::setRequestTime);
		attributeGetterFunctions.put("responseTime", apiAudit::getResponseTime);
		attributeSetterBiConsumers.put(
			"responseTime",
			(BiConsumer<apiAudit, Date>)apiAudit::setResponseTime);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAuditId() {
		return _auditId;
	}

	@Override
	public void setAuditId(long auditId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditId = auditId;
	}

	@JSON
	@Override
	public String getUUID() {
		if (_UUID == null) {
			return "";
		}
		else {
			return _UUID;
		}
	}

	@Override
	public void setUUID(String UUID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_UUID = UUID;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUUID() {
		return getColumnOriginalValue("UUID");
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getActionName() {
		if (_actionName == null) {
			return "";
		}
		else {
			return _actionName;
		}
	}

	@Override
	public void setActionName(String actionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_actionName = actionName;
	}

	@JSON
	@Override
	public String getSourceType() {
		if (_sourceType == null) {
			return "";
		}
		else {
			return _sourceType;
		}
	}

	@Override
	public void setSourceType(String sourceType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourceType = sourceType;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getStatusCode() {
		if (_statusCode == null) {
			return "";
		}
		else {
			return _statusCode;
		}
	}

	@Override
	public void setStatusCode(String statusCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusCode = statusCode;
	}

	@JSON
	@Override
	public String getRequestJson() {
		if (_requestJson == null) {
			return "";
		}
		else {
			return _requestJson;
		}
	}

	@Override
	public void setRequestJson(String requestJson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestJson = requestJson;
	}

	@JSON
	@Override
	public String getResponseJson() {
		if (_responseJson == null) {
			return "";
		}
		else {
			return _responseJson;
		}
	}

	@Override
	public void setResponseJson(String responseJson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responseJson = responseJson;
	}

	@JSON
	@Override
	public Date getRequestTime() {
		return _requestTime;
	}

	@Override
	public void setRequestTime(Date requestTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestTime = requestTime;
	}

	@JSON
	@Override
	public Date getResponseTime() {
		return _responseTime;
	}

	@Override
	public void setResponseTime(Date responseTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responseTime = responseTime;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, apiAudit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public apiAudit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, apiAudit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		apiAuditImpl apiAuditImpl = new apiAuditImpl();

		apiAuditImpl.setAuditId(getAuditId());
		apiAuditImpl.setUUID(getUUID());
		apiAuditImpl.setCreatedDate(getCreatedDate());
		apiAuditImpl.setActionName(getActionName());
		apiAuditImpl.setSourceType(getSourceType());
		apiAuditImpl.setStatus(getStatus());
		apiAuditImpl.setStatusCode(getStatusCode());
		apiAuditImpl.setRequestJson(getRequestJson());
		apiAuditImpl.setResponseJson(getResponseJson());
		apiAuditImpl.setRequestTime(getRequestTime());
		apiAuditImpl.setResponseTime(getResponseTime());

		apiAuditImpl.resetOriginalValues();

		return apiAuditImpl;
	}

	@Override
	public apiAudit cloneWithOriginalValues() {
		apiAuditImpl apiAuditImpl = new apiAuditImpl();

		apiAuditImpl.setAuditId(this.<Long>getColumnOriginalValue("auditId"));
		apiAuditImpl.setUUID(this.<String>getColumnOriginalValue("UUID"));
		apiAuditImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		apiAuditImpl.setActionName(
			this.<String>getColumnOriginalValue("actionName"));
		apiAuditImpl.setSourceType(
			this.<String>getColumnOriginalValue("sourceType"));
		apiAuditImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		apiAuditImpl.setStatusCode(
			this.<String>getColumnOriginalValue("statusCode"));
		apiAuditImpl.setRequestJson(
			this.<String>getColumnOriginalValue("requestJson"));
		apiAuditImpl.setResponseJson(
			this.<String>getColumnOriginalValue("responseJson"));
		apiAuditImpl.setRequestTime(
			this.<Date>getColumnOriginalValue("requestTime"));
		apiAuditImpl.setResponseTime(
			this.<Date>getColumnOriginalValue("responseTime"));

		return apiAuditImpl;
	}

	@Override
	public int compareTo(apiAudit apiAudit) {
		long primaryKey = apiAudit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof apiAudit)) {
			return false;
		}

		apiAudit apiAudit = (apiAudit)object;

		long primaryKey = apiAudit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<apiAudit> toCacheModel() {
		apiAuditCacheModel apiAuditCacheModel = new apiAuditCacheModel();

		apiAuditCacheModel.auditId = getAuditId();

		apiAuditCacheModel.UUID = getUUID();

		String UUID = apiAuditCacheModel.UUID;

		if ((UUID != null) && (UUID.length() == 0)) {
			apiAuditCacheModel.UUID = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			apiAuditCacheModel.createdDate = createdDate.getTime();
		}
		else {
			apiAuditCacheModel.createdDate = Long.MIN_VALUE;
		}

		apiAuditCacheModel.actionName = getActionName();

		String actionName = apiAuditCacheModel.actionName;

		if ((actionName != null) && (actionName.length() == 0)) {
			apiAuditCacheModel.actionName = null;
		}

		apiAuditCacheModel.sourceType = getSourceType();

		String sourceType = apiAuditCacheModel.sourceType;

		if ((sourceType != null) && (sourceType.length() == 0)) {
			apiAuditCacheModel.sourceType = null;
		}

		apiAuditCacheModel.status = getStatus();

		apiAuditCacheModel.statusCode = getStatusCode();

		String statusCode = apiAuditCacheModel.statusCode;

		if ((statusCode != null) && (statusCode.length() == 0)) {
			apiAuditCacheModel.statusCode = null;
		}

		apiAuditCacheModel.requestJson = getRequestJson();

		String requestJson = apiAuditCacheModel.requestJson;

		if ((requestJson != null) && (requestJson.length() == 0)) {
			apiAuditCacheModel.requestJson = null;
		}

		apiAuditCacheModel.responseJson = getResponseJson();

		String responseJson = apiAuditCacheModel.responseJson;

		if ((responseJson != null) && (responseJson.length() == 0)) {
			apiAuditCacheModel.responseJson = null;
		}

		Date requestTime = getRequestTime();

		if (requestTime != null) {
			apiAuditCacheModel.requestTime = requestTime.getTime();
		}
		else {
			apiAuditCacheModel.requestTime = Long.MIN_VALUE;
		}

		Date responseTime = getResponseTime();

		if (responseTime != null) {
			apiAuditCacheModel.responseTime = responseTime.getTime();
		}
		else {
			apiAuditCacheModel.responseTime = Long.MIN_VALUE;
		}

		return apiAuditCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<apiAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<apiAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<apiAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((apiAudit)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, apiAudit>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					apiAudit.class, ModelWrapper.class);

	}

	private long _auditId;

	private String _UUID;

	private Date _createdDate;
	private String _actionName;
	private String _sourceType;
	private int _status;
	private String _statusCode;
	private String _requestJson;
	private String _responseJson;
	private Date _requestTime;
	private Date _responseTime;

	public <T> T getColumnValue(String columnName) {
		Function<apiAudit, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((apiAudit)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("auditId", _auditId);
		_columnOriginalValues.put("UUID", _UUID);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("actionName", _actionName);
		_columnOriginalValues.put("sourceType", _sourceType);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusCode", _statusCode);
		_columnOriginalValues.put("requestJson", _requestJson);
		_columnOriginalValues.put("responseJson", _responseJson);
		_columnOriginalValues.put("requestTime", _requestTime);
		_columnOriginalValues.put("responseTime", _responseTime);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("auditId", 1L);

		columnBitmasks.put("UUID", 2L);

		columnBitmasks.put("createdDate", 4L);

		columnBitmasks.put("actionName", 8L);

		columnBitmasks.put("sourceType", 16L);

		columnBitmasks.put("status", 32L);

		columnBitmasks.put("statusCode", 64L);

		columnBitmasks.put("requestJson", 128L);

		columnBitmasks.put("responseJson", 256L);

		columnBitmasks.put("requestTime", 512L);

		columnBitmasks.put("responseTime", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private apiAudit _escapedModel;

}